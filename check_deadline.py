'''
Задание: Обработка
дедлайнов

Роль задачи в проекте
Дедлайн — это
ключевая
характеристика
заметки, помогающая
пользователю
организовать
задачи.Проверка
истечения
срока
выполнения
задачи
позволяет
своевременно
уведомлять
пользователя
о
пропущенных
дедлайнах, что
делает
систему
заметок
полезной
в
реальной
жизни.

Добавление
этой
функциональности в
проект поможет:
- Уведомлять
пользователей
о
просроченных
заметках.
- Заложить
основу
для
будущего
улучшения(например, добавления
напоминаний).

Описание
задания
Напишите
программу, которая:
- Сравнивает
дату
дедлайна
заметки(issue_date)
с
текущей
датой.
- Выводит
соответствующее
сообщение:
- Если
дедлайн
истёк, предупреждает
пользователя.
- Если
дедлайн
не
истёк, сообщает, сколько
времени
осталось
до
истечения
срока.

Требования
к
функциональности:
- Получите
текущую
дату
с
помощью
встроенной
библиотеки
Python(datetime).
- Проверьте, находится
ли
дедлайн
в
прошлом, настоящем
или
будущем.
- Реализуйте
разницу
в
днях
между
текущей
датой
и
дедлайном.
- Программа
должна
корректно
обрабатывать
формат
даты(например, день - месяц - год)
и
информировать
пользователя
о
неверном
формате
при
вводе.

Пример
работы
программы:

1.
Программа
запускается
и
выводит
текущую
дату:
Текущая
дата: 27 - 11 - 2024

2.
Запрашивает
у
пользователя
дату
дедлайна:

Введите
дату
дедлайна(в
формате
день - месяц - год): 25 - 11 - 2024

3.
Анализирует
введённую
дату
и
выводит
результат:
- Внимание! Дедлайн
истёк
2
дня
назад.
Или:
- До
дедлайна
осталось
3
дня.

Формат
сдачи
задания:
Создайте
новый
файл
в
репозитории
note_manager
с
именем
check_deadline.py.
В
файле
должна
быть
программа, которая:
- Запрашивает
у
пользователя
issue_date.
- Проверяет, истёк
ли
дедлайн.
- Выводит
сообщение
с
результатом
проверки.
- Код
должен
быть
читаемым, с
комментариями.

Критерии
оценки:

1.
Функциональность:
- Программа
корректно
получает
текущую
дату.
- Сравнивает
текущую
дату
с
issue_date
и
определяет, истёк
ли
дедлайн.
- Рассчитывает
разницу
в
днях
между
датами
и
выводит
соответствующее
сообщение.

2.
Читаемость
и
структура
кода:
- Логика
программы
разбита
на
понятные
блоки.
- Код
содержит
комментарии, объясняющие
основные
шаги.

3.
Удобство
для
пользователя:
- Чёткие
инструкции
по
вводу
даты.
- Понятные
сообщения
о
результатах
анализа
дедлайна.

4.
Обработка
ошибок:
- Программа
уведомляет
пользователя
о
некорректном
формате
даты
и
запрашивает
ввод
повторно.

5.
Использование
Python - конструкций:
- Использование
библиотеки
datetime
для
работы
с
датами.
- Использование
try-except для обработки ошибок при неправильном формате даты.

Рекомендации
для
сдачи:

Тестирование:
- Проверьте
работу
программы
с
разными
типами
данных:
- Даты
в
прошлом, настоящем
и
будущем.
- Неверный
формат
даты(например, 2024 - 11 - 25).

Улучшение(по
желанию):
- Добавьте
проверку
на
совпадение
с
текущей
датой(например, *«Дедлайн
сегодня!» * ).
- Реализуйте
поддержку
разных
форматов
ввода
даты(например, день - месяц - год
или
год - месяц - день).

Обратная
связь
пользователю:
- Давайте
пользователю
ясные
инструкции, например:
> Убедитесь, что
вводите дату
в формате * день - месяц - год *, например: 10 - 12 - 2024.
'''




# Импортируем необходимые модули для работы с датами
from datetime import datetime

# Основной блок программы
while True:
    try:
        # Запрашиваем дату дедлайна у пользователя
        deadline_str = input("Введите дату дедлайна (в формате день-месяц-год, например 25-12-2024): ")

        # Преобразуем строку с датой в объект datetime
        deadline_date = datetime.strptime(deadline_str, "%d-%m-%Y")

        # Вычисляем разницу между текущей датой и дедлайном
        time_difference = deadline_date - current_date
        days_difference = time_difference.days

        # Проверяем статус дедлайна и выводим соответствующее сообщение
        if days_difference < 0:
            print(f"Внимание! Дедлайн истёк {abs(days_difference):02d} дней назад.")
        elif days_difference == 0:
            print("Дедлайн сегодня!")
        else:
            print(f"До дедлайна осталось {days_difference:02d} дней.")

        # Прерываем цикл после успешной обработки даты
        break

    except ValueError:
        # Обработка ошибки неверного формата даты
        print("Ошибка! Пожалуйста, введите дату в правильном формате (день-месяц-год).")
        print("Пример: 25-12-2024")

    except Exception as e:
        # Обработка прочих ошибок
        print(f"Произошла непредвиденная ошибка: {str(e)}")
        print("Пожалуйста, попробуйте снова.")