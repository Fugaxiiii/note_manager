'''
Grade 3. Этап 3 (Функции)
Общее описание: Введение функций для упрощения
кода и организации логики.
11. Функция создания заметки
Напишите функцию для создания новой заметки и возврата словаря.
Файл: create_note_function.py
Задание: Функция создания заметки
Роль задачи в проекте
Функция для создания заметки является ключевой частью
системы управления заметками. Она позволяет стандартизировать
процесс создания заметок, минимизировать ошибки при вводе
данных и сделать программу более удобной для масштабирования.
Реализация этой функции:
Закладывает основу для работы с множеством заметок.
Повышает читаемость и переиспользуемость кода.
Упрощает добавление новых заметок в будущем.
Описание задания
1. Напишите функцию create_note(), которая:
Запрашивает у пользователя информацию для создания заметки.
Возвращает данные заметки в виде словаря.
2. Требования к функциональности:
Заметка должна содержать следующие поля:
username — имя пользователя.
title — заголовок заметки.
content — описание заметки.
status — статус заметки (например, "новая",
"в процессе", "выполнена").
created_date — дата создания заметки (текущая дата,
получаемая автоматически).
issue_date — дата дедлайна (запрашивается у пользователя).
Программа должна автоматически добавлять текущую дату в поле
created_date с использованием библиотеки datetime.
Реализуйте проверку корректности формата для поля issue_date
(например, "день-месяц-год").
3. Вызовите функцию в конце файла, чтобы продемонстрировать
её работу. Выведите результат работы функции на экран.
Пример работы программы

1. Пользователь вызывает функцию для создания заметки.

Введите имя пользователя: Алексей
Введите заголовок заметки: Список покупок
Введите описание заметки: Купить продукты на неделю
Введите статус заметки (новая, в процессе, выполнено): новая
Введите дату дедлайна (день-месяц-год): 30-11-2024

2.
Программа автоматически добавляет текущую дату:
Заметка создана: {'username': 'Алексей', 'title': 'Список покупок',
'content': 'Купить продукты на неделю', 'status': 'новая', 'created_date':
'27-11-2024', 'issue_date': '30-11-2024'}

3.
Формат сдачи задания
1. Создайте новый файл в репозитории note_manager с именем
create_note_function.py.
2. В файле должна быть функция create_note(), которая:
Запрашивает у пользователя данные для создания заметки.
Формирует словарь с полями заметки.
Возвращает словарь.
3. Вызовите функцию в основном коде файла и выведите результат
на экран.
Критерии оценки
1. Функциональность:
Функция запрашивает все необходимые данные у пользователя.
Поле created_date заполняется автоматически текущей датой.
Возвращается словарь с правильной структурой.
2. Читаемость и структура кода:
Код организован в логические блоки.
Используются понятные имена переменных.
Код содержит комментарии, поясняющие работу функции.
3. Удобство для пользователя:
Чёткие подсказки для ввода данных.
Проверка формата поля issue_date (например, "день-месяц-год")
и сообщение об ошибке при неверном вводе.
4. Использование Python-конструкций:
Используется библиотека datetime для получения текущей даты.
Обрабатываются возможные ошибки ввода.
Рекомендации для сдачи
1. Тестирование программы:
Проверьте функцию с разными входными данными.
Проверьте, что текущая дата автоматически добавляется в
created_date.
Убедитесь, что программа обрабатывает неверный формат даты
(например, "30/11/2024").
2. Рефакторинг (по желанию):
Добавьте проверку на пустые значения (например,
заголовок или описание заметки).
Реализуйте отдельную функцию для валидации даты.
3. Улучшение (по желанию):
Добавьте возможность задать поле issue_date по умолчанию
(например, неделя от текущей даты).
Расширьте проверку статуса, предлагая пользователю выбор
из фиксированного списка (например, ["новая", "в процессе",
"выполнено"]).
Создание функции create_note() поможет упростить процесс
добавления заметок и станет базой для дальнейших улучшений системы.
12. Функция обновления заметки
Создайте функцию для обновления любого поля заметки.
Файл: update_note_function.py

'''

from datetime import datetime


def create_note():
    # Получаем текущую дату
    current_date = datetime.now()
    print("Текущая дата:", current_date.strftime("%d-%m-%Y"))

    while True:
        try:
            # Запрашиваем у пользователя данные для заметки
            name = input("Введите имя пользователя: ")
            title = input("Введите заголовок заметки: ")
            description = input("Введите описание заметки: ")

            status_list = ["новая", "в процессе", "выполнено"]
            status = ""
            while status not in status_list:
                status = input(f"Введите статус заметки ({', '.join(status_list)}): ")
                if status not in status_list:
                    print('Пожалуйста, введите статус заметки из перечисленных (новая, в процессе, выполнено)')

            creation_date = input("Введите дату создания (день-месяц-год): ")
            try:
                # Проверка формата даты создания
                datetime.strptime(creation_date, "%d-%m-%Y")
            except ValueError:
                print("Некорректный формат даты создания. Пожалуйста, введите дату в формате день-месяц-год.")
                continue

            issue_date = input("Введите дату дедлайна (день-месяц-год): ")
            try:
                # Проверяем формат даты дедлайна
                datetime.strptime(issue_date, "%d-%m-%Y")
            except ValueError:
                print("Некорректный формат даты дедлайна. Пожалуйста, введите дату в формате день-месяц-год.")
                break

            except ValueError:
                print("Некорректный формат даты. Пожалуйста, введите дату в формате день-месяц-год.")

            note = {
                "Имя": name,
                "Заголовок": title,
                "Описание": description,
                "Статус": status,
                "Дата создания": creation_date,
                "Дата дедлайна": issue_date
            }
            return note

        except Exception as e:
            print(f"Произошла ошибка: {e}")

# Вызов функции для проверки дедлайна
if __name__ == "__main__":
    note = create_note()
    print("Заметка создана:", note)